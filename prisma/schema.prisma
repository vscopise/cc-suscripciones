// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  admin
  user
}

enum IdentificationType {
  Cedula    @map("CÃ©dula")
  Pasaporte
}

enum Period {
  Mensual
  Trimestral
  Semestral
  Anual
}

enum PaymentMethod {
  AbitabNet
  Brou
  BrouDebito
  CobroYa
  Efectivo
  Factura
  FirstData
  Gentileza
  MercadoPago
  Multipago
  Passcard
  PaypalWesternUnion
  Stripe
  StripeMercadoPago
  TransferenciaBancaria
  Visa
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(user)

  //Subscription Subscription[]
  Client Client[]
}

model Plan {
  id          String @id @default(uuid())
  name        String @unique
  description String

  Subscription Subscription[]
}

model Client {
  id                 String             @id @default(uuid())
  clientNumber       Int                @default(autoincrement())
  name               String             @default("")
  lastName           String             @default("")
  identification     Int                @default(0)
  identificationType IdentificationType @default(Cedula)
  phone              String             @default("")
  email              String             @default("")
  address            String             @default("")
  city               String             @default("")
  state              String             @default("")
  //observations       String             @default("")

  Subscription Subscription[]

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  CreditCard CreditCard[]
  
  ClientNote ClientNote[]
}

model Country {
  id     String   @id
  name   String
  Client Client[]
}

model Subscription {
  id               String        @id @default(uuid())
  dateStart        DateTime      @default(now())
  dateLastPay      DateTime?
  dateDeactivation DateTime?
  amount           Int
  period           Period        @default(Mensual)
  active           Boolean       @default(true)
  paymentMethod    PaymentMethod @default(MercadoPago)
  delivery         String?
  comment          String?

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  creditCard   CreditCard? @relation(fields: [creditCardId], references: [id])
  creditCardId String?
}

model CreditCard {
  id         String   @id @default(uuid())
  number     String
  expiration String
  cvv        String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  Subscription Subscription[]
}

model ClientNote {
  id   String   @id @default(uuid())
  date DateTime
  note String   @default("")

  client   Client @relation(fields: [clientId], references: [id])
  clientId String
}
